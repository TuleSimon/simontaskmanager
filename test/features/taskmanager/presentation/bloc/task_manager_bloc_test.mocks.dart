// Mocks generated by Mockito 5.4.4 from annotations
// in simontaskmanager/test/features/taskmanager/presentation/bloc/task_manager_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simontaskmanager/features/core/error/failures.dart' as _i6;
import 'package:simontaskmanager/features/taskmanager/domain/entities/todo_entity.dart'
    as _i9;
import 'package:simontaskmanager/features/taskmanager/domain/entities/todolist_entity.dart'
    as _i7;
import 'package:simontaskmanager/features/taskmanager/domain/repositories/todoRepository.dart'
    as _i2;
import 'package:simontaskmanager/features/taskmanager/domain/usecases/todos/add_new_todo_usecase.dart'
    as _i8;
import 'package:simontaskmanager/features/taskmanager/domain/usecases/todos/get_all_todos_usecase.dart'
    as _i4;
import 'package:simontaskmanager/features/taskmanager/domain/usecases/todos/get_more_todos_usecase.dart'
    as _i10;
import 'package:simontaskmanager/features/taskmanager/domain/usecases/todos/save_todos_usecase.dart'
    as _i11;
import 'package:simontaskmanager/features/taskmanager/utils/validators/todo_validator.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoRepository_0 extends _i1.SmartFake
    implements _i2.TodoRepository {
  _FakeTodoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllTodosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTodosUseCase extends _i1.Mock
    implements _i4.GetAllTodosUseCase {
  @override
  _i2.TodoRepository get todosRepository => (super.noSuchMethod(
        Invocation.getter(#todosRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
        returnValueForMissingStub: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>> call(
          {required _i4.GetAllTodosParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.TodoListEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.TodoListEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>>);
}

/// A class which mocks [AddNewTodoUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNewTodoUsecase extends _i1.Mock implements _i8.AddNewTodoUsecase {
  @override
  _i2.TodoRepository get todosRepository => (super.noSuchMethod(
        Invocation.getter(#todosRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
        returnValueForMissingStub: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.TodoEntity>> call(
          {required _i8.AddNewTodoParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i9.TodoEntity>>.value(
            _FakeEither_1<_i6.Failure, _i9.TodoEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i9.TodoEntity>>.value(
                _FakeEither_1<_i6.Failure, _i9.TodoEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i9.TodoEntity>>);
}

/// A class which mocks [GetMoreTodosUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoreTodosUsecase extends _i1.Mock
    implements _i10.GetMoreTodosUsecase {
  @override
  _i2.TodoRepository get todosRepository => (super.noSuchMethod(
        Invocation.getter(#todosRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
        returnValueForMissingStub: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>> call(
          {required _i4.GetAllTodosParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.TodoListEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.TodoListEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.TodoListEntity>>);
}

/// A class which mocks [SaveTodosUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTodosUsecase extends _i1.Mock implements _i11.SaveTodosUsecase {
  @override
  _i2.TodoRepository get todosRepository => (super.noSuchMethod(
        Invocation.getter(#todosRepository),
        returnValue: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
        returnValueForMissingStub: _FakeTodoRepository_0(
          this,
          Invocation.getter(#todosRepository),
        ),
      ) as _i2.TodoRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          {required _i11.SaveTodosParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [TodoValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoValidator extends _i1.Mock implements _i12.TodoValidator {
  @override
  _i6.InputFailure? validateTodoText(String? todo) => (super.noSuchMethod(
        Invocation.method(
          #validateTodoText,
          [todo],
        ),
        returnValueForMissingStub: null,
      ) as _i6.InputFailure?);
}
