// Mocks generated by Mockito 5.4.4 from annotations
// in simontaskmanager/test/features/taskmanager/domain/usecases/auth/login_user_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simontaskmanager/features/core/error/failures.dart' as _i5;
import 'package:simontaskmanager/features/taskmanager/domain/entities/token_entity.dart'
    as _i7;
import 'package:simontaskmanager/features/taskmanager/domain/entities/user_entity.dart'
    as _i6;
import 'package:simontaskmanager/features/taskmanager/domain/repositories/authRepository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>> login({
    required String? username,
    required String? password,
    required int? expiresInMin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
            #expiresInMin: expiresInMin,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.UserEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.UserEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>> getLoggedInUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLoggedInUser,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.UserEntity>(
          this,
          Invocation.method(
            #getLoggedInUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.UserEntity>(
          this,
          Invocation.method(
            #getLoggedInUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.UserEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.TokenEntity>> refreshAuthToken({
    required String? refreshToken,
    required int? expiresInMin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshAuthToken,
          [],
          {
            #refreshToken: refreshToken,
            #expiresInMin: expiresInMin,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.TokenEntity>>.value(
            _FakeEither_0<_i5.Failure, _i7.TokenEntity>(
          this,
          Invocation.method(
            #refreshAuthToken,
            [],
            {
              #refreshToken: refreshToken,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i7.TokenEntity>>.value(
                _FakeEither_0<_i5.Failure, _i7.TokenEntity>(
          this,
          Invocation.method(
            #refreshAuthToken,
            [],
            {
              #refreshToken: refreshToken,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.TokenEntity>>);
}
