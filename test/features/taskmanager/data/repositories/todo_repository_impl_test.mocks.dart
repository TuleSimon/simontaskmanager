// Mocks generated by Mockito 5.4.4 from annotations
// in simontaskmanager/test/features/taskmanager/data/repositories/todo_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simontaskmanager/features/core/network/network_info.dart'
    as _i9;
import 'package:simontaskmanager/features/taskmanager/data/datasources/local/task_manager_localdatasource.dart'
    as _i8;
import 'package:simontaskmanager/features/taskmanager/data/datasources/remote/task_manager_datasource.dart'
    as _i6;
import 'package:simontaskmanager/features/taskmanager/data/models/todo_dto.dart'
    as _i3;
import 'package:simontaskmanager/features/taskmanager/data/models/todolist_dto.dart'
    as _i2;
import 'package:simontaskmanager/features/taskmanager/data/models/token_dto.dart'
    as _i5;
import 'package:simontaskmanager/features/taskmanager/data/models/user_dto.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoListDTO_0 extends _i1.SmartFake implements _i2.TodoListDTO {
  _FakeTodoListDTO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoDTO_1 extends _i1.SmartFake implements _i3.TodoDTO {
  _FakeTodoDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserDTO_2 extends _i1.SmartFake implements _i4.UserDTO {
  _FakeUserDTO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenDTO_3 extends _i1.SmartFake implements _i5.TokenDTO {
  _FakeTokenDTO_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskManagerDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskManagerDatasource extends _i1.Mock
    implements _i6.TaskManagerDatasource {
  @override
  _i7.Future<_i2.TodoListDTO> getAllTodos({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodos,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i7.Future<_i2.TodoListDTO>.value(_FakeTodoListDTO_0(
          this,
          Invocation.method(
            #getAllTodos,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.TodoListDTO>.value(_FakeTodoListDTO_0(
          this,
          Invocation.method(
            #getAllTodos,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i7.Future<_i2.TodoListDTO>);

  @override
  _i7.Future<_i3.TodoDTO> addTodos({
    required String? todo,
    required int? userid,
    required bool? isCompleted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodos,
          [],
          {
            #todo: todo,
            #userid: userid,
            #isCompleted: isCompleted,
          },
        ),
        returnValue: _i7.Future<_i3.TodoDTO>.value(_FakeTodoDTO_1(
          this,
          Invocation.method(
            #addTodos,
            [],
            {
              #todo: todo,
              #userid: userid,
              #isCompleted: isCompleted,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.TodoDTO>.value(_FakeTodoDTO_1(
          this,
          Invocation.method(
            #addTodos,
            [],
            {
              #todo: todo,
              #userid: userid,
              #isCompleted: isCompleted,
            },
          ),
        )),
      ) as _i7.Future<_i3.TodoDTO>);

  @override
  _i7.Future<_i4.UserDTO> login({
    required String? username,
    required String? password,
    required int? expiresInMin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
            #expiresInMin: expiresInMin,
          },
        ),
        returnValue: _i7.Future<_i4.UserDTO>.value(_FakeUserDTO_2(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.UserDTO>.value(_FakeUserDTO_2(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
      ) as _i7.Future<_i4.UserDTO>);

  @override
  _i7.Future<_i5.TokenDTO> refreshAuthToken({
    required String? refreshToken,
    required int? expiresInMin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshAuthToken,
          [],
          {
            #refreshToken: refreshToken,
            #expiresInMin: expiresInMin,
          },
        ),
        returnValue: _i7.Future<_i5.TokenDTO>.value(_FakeTokenDTO_3(
          this,
          Invocation.method(
            #refreshAuthToken,
            [],
            {
              #refreshToken: refreshToken,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.TokenDTO>.value(_FakeTokenDTO_3(
          this,
          Invocation.method(
            #refreshAuthToken,
            [],
            {
              #refreshToken: refreshToken,
              #expiresInMin: expiresInMin,
            },
          ),
        )),
      ) as _i7.Future<_i5.TokenDTO>);
}

/// A class which mocks [TaskManagerLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskManagerLocalDatasource extends _i1.Mock
    implements _i8.TaskManagerLocalDatasource {
  @override
  _i7.Future<_i2.TodoListDTO> getCacheAllTodos() => (super.noSuchMethod(
        Invocation.method(
          #getCacheAllTodos,
          [],
        ),
        returnValue: _i7.Future<_i2.TodoListDTO>.value(_FakeTodoListDTO_0(
          this,
          Invocation.method(
            #getCacheAllTodos,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.TodoListDTO>.value(_FakeTodoListDTO_0(
          this,
          Invocation.method(
            #getCacheAllTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i2.TodoListDTO>);

  @override
  _i7.Future<bool> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> cacheTodos({required _i2.TodoListDTO? todos}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTodos,
          [],
          {#todos: todos},
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> saveUserData({required _i4.UserDTO? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserData,
          [],
          {#user: user},
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i4.UserDTO?> getLoggedInUser() => (super.noSuchMethod(
        Invocation.method(
          #getLoggedInUser,
          [],
        ),
        returnValue: _i7.Future<_i4.UserDTO?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.UserDTO?>.value(),
      ) as _i7.Future<_i4.UserDTO?>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  @override
  _i7.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}
